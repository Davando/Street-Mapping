{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 LucidaGrande;\f2\froman\fcharset0 Times-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww14100\viewh9020\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
David Wang\
dwang56@u.rochester.edu\
Assignment: Project 3 \
Lab section: MW 200-315 Gavet\
\
\'93I worked on this project alone\'94\
\
Classes \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Node\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 {\listtext	
\f1 \uc0\u8259 
\f0 	}Stores the node information such as longitude, latitude, name, tentative distance, list of connected edges, and parent node (for use in Dijkstra).\
{\listtext	
\f1 \uc0\u8259 
\f0 	}
\f2\b compareTo( ) 
\f0\b0 method is used to compare the tentative distance values of Nodes. The class contains getters and setters for all appropriate information. \
{\listtext	
\f1 \uc0\u8259 
\f0 	}
\f2\b targetEdge( ) 
\f0\b0 method returns the edge between our selected Node and a target Node\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8226 	}Edge\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 {\listtext	
\f1 \uc0\u8259 
\f0 	}Stores the edge information such as weight, name, node1, and node2 which are nodes attached to either end of the specified edge. \
{\listtext	
\f1 \uc0\u8259 
\f0 	}Given a node, 
\f2\b targetNode( ) 
\f0\b0 method returns the node on the corresponding side of the edge. \
{\listtext	
\f1 \uc0\u8259 
\f0 	}The class contains getters and setters for all appropriate information.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}method setWeight( ) calculates the weight value of the edge using the latitude and longitude values of node1 and node2.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8226 	}Graph\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 {\listtext	
\f1 \uc0\u8259 
\f0 	}
\f2\b getLat_Min_Max( ) 
\f0\b0 method calculates the maximum and minimum latitude and longitude values from all nodes which helps to scale the graph properly in paintComponent. Initial max and min values are set arbitrarily and then are updated when higher or lower values are found by iterating through the list of all nodes. The total height is calculated by subtracting lat_Min from lat_Max and the total length is calculated by subtracting long_Min from long_Max.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}
\f2\b paintComponent( ) 
\f0\b0 iterates through HashMap cape which contains all edges and draws them using
\f2\b  x( ) 
\f0\b0 helper method. The shortest distance from start and end nodes are drawn using 
\f2\b y( )
\f0\b0  helper method using HashMap edges. And 
\f2\b z( )
\f0\b0  helper method draws ovals at the start and end intersections.\
{\listtext	
\f1 \uc0\u8259 
\f0 	}
\f2\b disjkstras( ) 
\f0\b0 method finds the shortest path between two specified nodes using Dijkstra\'92s algorithm. Which sets the tentative distance of all nodes except the starting node to infinity and adds all nodes to a priority queue. While the priority queue is not empty it polls the Node with the lowest tentative distance value and runs the algorithm.  Starting from the destination node, the method then adds all parent nodes into the LinkedList shortest which is also added to the HashMap edges to later be drawn. \
{\listtext	
\f1 \uc0\u8259 
\f0 	}run( ) method runs the entire program. The specified text files are read in a try and catch statement, creating nodes and edges which are then added to either a HashMap of Nodes or a HashMap of Edges. Creates a Frame which draws out the content of an instance of Class Graph. \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8226 	}StreetMap\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 {\listtext	
\f1 \uc0\u8259 
\f0 	}Creates an instance of Class Graph and runs through scenarios of different argument lengths. \
\pard\tx566\tx1133\pardeftab720\sl280\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\
eg. of how to run the code in Terminal: java StreetMap ur.txt - -show --directions SUEB GILBERT-LONG\
\
\pard\tx220\tx720\tx1133\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Notable Obstacles: Since I worked on this project alone, it was quite challenging to resolve a lot of the issues on my own. I persisted solving most of the problems or reading the text files by myself, and drawing out the map as well. A major issue that I ran into while running the code was optimizing the code and getting it to run within a reasonable amount of time. At first it took 3min for dijkstras to run monroe.txt and over an hour for nys.txt, but after some optimization, every single map should draw within 10 seconds. I believe this program runs in O(n^2) time. I\'92m quite proud of this and hope to receive extra credit for it since I\'92ve heard from a number of my peers that their program takes much longer to run. I\'92ve also added pins to highlight the starting and ending points for shortest path. The empty circle indicates the starting node  and the filled circle indicates the destination node. Moreover, the starting intersection and the destination intersection have been printed in blue onto the Canvas, which should make it easier to confirm the nodes that you have entered. Furthermore, the shortest path line has been made thicker for better clarity and the background is pink for added aesthetic appeal. I hope these helpful additions can also qualify for extra credit as they have been specially added for your viewing pleasure. \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\pardeftab720\sl280\partightenfactor0
\cf2 \
\
}